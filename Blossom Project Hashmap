from linked_list import Node, LinkedList
from blossom_lib import flower_definitions 
class Hashmap():

  def __init__(self,size):
    self.array_size= size
    self.array=[LinkedList() for x in range(self.array_size)]

  def hash(self,key):
    return sum(key.encode())   #this is a hashcode

  def compress(self,hash_code):
    return hash_code%self.array_size
  
  def assign(self,key,value):
    hash_code=  self.hash(key)
    array_index= self.compress(hash_code)
    payload=Node([key, value])
    list_at_array=self.array[array_index]
    for item in list_at_array:
      if key == item[0]:
        item[1]=value
        return
    list_at_array.insert(payload)
    
    


  def retrieve(self,key):
    array_index=self.compress(self.hash(key))
    list_at_index= self.array[array_index]
    for item in list_at_index:
      if item[0] == key:
        return item[1]

blossom = Hashmap(len(flower_definitions))
for flower in flower_definitions:
  blossom.assign(flower[0], flower[1])
print(blossom.retrieve('sunflower'))
print(blossom.retrieve('daisy'))
print(blossom.retrieve('rose'))
